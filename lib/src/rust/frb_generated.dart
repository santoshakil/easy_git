// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/git.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'models/repository.dart';
import 'models/status.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -1331396205;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_easy_git',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<List<String>> crateApiGitCommitMultipleRepositories({
    required List<String> paths,
    required String message,
  });

  Future<String> crateApiGitCommitRepository({
    required String path,
    required String message,
  });

  Future<List<String>> crateApiGitDiscardMultipleRepositories({
    required List<String> paths,
  });

  Future<void> crateApiGitDiscardRepositoryChanges({required String path});

  Future<List<String>> crateApiGitFetchMultipleRepositories({
    required List<String> paths,
  });

  Future<void> crateApiGitFetchRepository({required String path});

  Future<List<RepositoryInfo>> crateApiGitGetMultipleRepositoryInfo({
    required List<String> paths,
  });

  Future<RepositoryInfo> crateApiGitGetRepositoryInfo({required String path});

  Future<RepoStatus> crateApiGitGetRepositoryStatus({required String path});

  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();

  Future<List<String>> crateApiGitPullMultipleRepositories({
    required List<String> paths,
  });

  Future<void> crateApiGitPullRepository({required String path});

  Future<List<String>> crateApiGitPushMultipleRepositories({
    required List<String> paths,
  });

  Future<void> crateApiGitPushRepository({required String path});

  Future<List<String>> crateApiGitScanRepositories({required String rootPath});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<List<String>> crateApiGitCommitMultipleRepositories({
    required List<String> paths,
    required String message,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_String(paths, serializer);
          sse_encode_String(message, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiGitCommitMultipleRepositoriesConstMeta,
        argValues: [paths, message],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGitCommitMultipleRepositoriesConstMeta =>
      const TaskConstMeta(
        debugName: "commit_multiple_repositories",
        argNames: ["paths", "message"],
      );

  @override
  Future<String> crateApiGitCommitRepository({
    required String path,
    required String message,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          sse_encode_String(message, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiGitCommitRepositoryConstMeta,
        argValues: [path, message],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGitCommitRepositoryConstMeta =>
      const TaskConstMeta(
        debugName: "commit_repository",
        argNames: ["path", "message"],
      );

  @override
  Future<List<String>> crateApiGitDiscardMultipleRepositories({
    required List<String> paths,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_String(paths, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiGitDiscardMultipleRepositoriesConstMeta,
        argValues: [paths],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGitDiscardMultipleRepositoriesConstMeta =>
      const TaskConstMeta(
        debugName: "discard_multiple_repositories",
        argNames: ["paths"],
      );

  @override
  Future<void> crateApiGitDiscardRepositoryChanges({required String path}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiGitDiscardRepositoryChangesConstMeta,
        argValues: [path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGitDiscardRepositoryChangesConstMeta =>
      const TaskConstMeta(
        debugName: "discard_repository_changes",
        argNames: ["path"],
      );

  @override
  Future<List<String>> crateApiGitFetchMultipleRepositories({
    required List<String> paths,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_String(paths, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiGitFetchMultipleRepositoriesConstMeta,
        argValues: [paths],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGitFetchMultipleRepositoriesConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_multiple_repositories",
        argNames: ["paths"],
      );

  @override
  Future<void> crateApiGitFetchRepository({required String path}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiGitFetchRepositoryConstMeta,
        argValues: [path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGitFetchRepositoryConstMeta =>
      const TaskConstMeta(debugName: "fetch_repository", argNames: ["path"]);

  @override
  Future<List<RepositoryInfo>> crateApiGitGetMultipleRepositoryInfo({
    required List<String> paths,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_String(paths, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_repository_info,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiGitGetMultipleRepositoryInfoConstMeta,
        argValues: [paths],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGitGetMultipleRepositoryInfoConstMeta =>
      const TaskConstMeta(
        debugName: "get_multiple_repository_info",
        argNames: ["paths"],
      );

  @override
  Future<RepositoryInfo> crateApiGitGetRepositoryInfo({required String path}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_repository_info,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiGitGetRepositoryInfoConstMeta,
        argValues: [path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGitGetRepositoryInfoConstMeta =>
      const TaskConstMeta(debugName: "get_repository_info", argNames: ["path"]);

  @override
  Future<RepoStatus> crateApiGitGetRepositoryStatus({required String path}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_repo_status,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiGitGetRepositoryStatusConstMeta,
        argValues: [path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGitGetRepositoryStatusConstMeta =>
      const TaskConstMeta(
        debugName: "get_repository_status",
        argNames: ["path"],
      );

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGreetConstMeta,
        argValues: [name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta =>
      const TaskConstMeta(debugName: "greet", argNames: ["name"]);

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  Future<List<String>> crateApiGitPullMultipleRepositories({
    required List<String> paths,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_String(paths, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiGitPullMultipleRepositoriesConstMeta,
        argValues: [paths],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGitPullMultipleRepositoriesConstMeta =>
      const TaskConstMeta(
        debugName: "pull_multiple_repositories",
        argNames: ["paths"],
      );

  @override
  Future<void> crateApiGitPullRepository({required String path}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiGitPullRepositoryConstMeta,
        argValues: [path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGitPullRepositoryConstMeta =>
      const TaskConstMeta(debugName: "pull_repository", argNames: ["path"]);

  @override
  Future<List<String>> crateApiGitPushMultipleRepositories({
    required List<String> paths,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_String(paths, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiGitPushMultipleRepositoriesConstMeta,
        argValues: [paths],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGitPushMultipleRepositoriesConstMeta =>
      const TaskConstMeta(
        debugName: "push_multiple_repositories",
        argNames: ["paths"],
      );

  @override
  Future<void> crateApiGitPushRepository({required String path}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiGitPushRepositoryConstMeta,
        argValues: [path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGitPushRepositoryConstMeta =>
      const TaskConstMeta(debugName: "push_repository", argNames: ["path"]);

  @override
  Future<List<String>> crateApiGitScanRepositories({required String rootPath}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(rootPath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiGitScanRepositoriesConstMeta,
        argValues: [rootPath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGitScanRepositoriesConstMeta =>
      const TaskConstMeta(
        debugName: "scan_repositories",
        argNames: ["rootPath"],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  CommitInfo dco_decode_box_autoadd_commit_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_commit_info(raw);
  }

  @protected
  CommitInfo dco_decode_commit_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return CommitInfo(
      hash: dco_decode_String(arr[0]),
      shortHash: dco_decode_String(arr[1]),
      message: dco_decode_String(arr[2]),
      author: dco_decode_String(arr[3]),
      email: dco_decode_String(arr[4]),
      timestamp: dco_decode_i_64(arr[5]),
    );
  }

  @protected
  FileStatus dco_decode_file_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FileStatus(
      path: dco_decode_String(arr[0]),
      status: dco_decode_file_status_kind(arr[1]),
    );
  }

  @protected
  FileStatusKind dco_decode_file_status_kind(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FileStatusKind.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<FileStatus> dco_decode_list_file_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_file_status).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<RepositoryInfo> dco_decode_list_repository_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_repository_info).toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  CommitInfo? dco_decode_opt_box_autoadd_commit_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_commit_info(raw);
  }

  @protected
  RepoStatus dco_decode_repo_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return RepoStatus(
      path: dco_decode_String(arr[0]),
      isClean: dco_decode_bool(arr[1]),
      files: dco_decode_list_file_status(arr[2]),
    );
  }

  @protected
  RepositoryInfo dco_decode_repository_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return RepositoryInfo(
      path: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      currentBranch: dco_decode_opt_String(arr[2]),
      isDirty: dco_decode_bool(arr[3]),
      uncommittedChanges: dco_decode_i_32(arr[4]),
      untrackedFiles: dco_decode_i_32(arr[5]),
      unpushedCommits: dco_decode_i_32(arr[6]),
      ahead: dco_decode_i_32(arr[7]),
      behind: dco_decode_i_32(arr[8]),
      lastCommit: dco_decode_opt_box_autoadd_commit_info(arr[9]),
      files: dco_decode_list_file_status(arr[10]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  CommitInfo sse_decode_box_autoadd_commit_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_commit_info(deserializer));
  }

  @protected
  CommitInfo sse_decode_commit_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_hash = sse_decode_String(deserializer);
    var var_shortHash = sse_decode_String(deserializer);
    var var_message = sse_decode_String(deserializer);
    var var_author = sse_decode_String(deserializer);
    var var_email = sse_decode_String(deserializer);
    var var_timestamp = sse_decode_i_64(deserializer);
    return CommitInfo(
      hash: var_hash,
      shortHash: var_shortHash,
      message: var_message,
      author: var_author,
      email: var_email,
      timestamp: var_timestamp,
    );
  }

  @protected
  FileStatus sse_decode_file_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_path = sse_decode_String(deserializer);
    var var_status = sse_decode_file_status_kind(deserializer);
    return FileStatus(path: var_path, status: var_status);
  }

  @protected
  FileStatusKind sse_decode_file_status_kind(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return FileStatusKind.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<FileStatus> sse_decode_list_file_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FileStatus>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_file_status(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<RepositoryInfo> sse_decode_list_repository_info(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <RepositoryInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_repository_info(deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  CommitInfo? sse_decode_opt_box_autoadd_commit_info(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_commit_info(deserializer));
    } else {
      return null;
    }
  }

  @protected
  RepoStatus sse_decode_repo_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_path = sse_decode_String(deserializer);
    var var_isClean = sse_decode_bool(deserializer);
    var var_files = sse_decode_list_file_status(deserializer);
    return RepoStatus(path: var_path, isClean: var_isClean, files: var_files);
  }

  @protected
  RepositoryInfo sse_decode_repository_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_path = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_currentBranch = sse_decode_opt_String(deserializer);
    var var_isDirty = sse_decode_bool(deserializer);
    var var_uncommittedChanges = sse_decode_i_32(deserializer);
    var var_untrackedFiles = sse_decode_i_32(deserializer);
    var var_unpushedCommits = sse_decode_i_32(deserializer);
    var var_ahead = sse_decode_i_32(deserializer);
    var var_behind = sse_decode_i_32(deserializer);
    var var_lastCommit = sse_decode_opt_box_autoadd_commit_info(deserializer);
    var var_files = sse_decode_list_file_status(deserializer);
    return RepositoryInfo(
      path: var_path,
      name: var_name,
      currentBranch: var_currentBranch,
      isDirty: var_isDirty,
      uncommittedChanges: var_uncommittedChanges,
      untrackedFiles: var_untrackedFiles,
      unpushedCommits: var_unpushedCommits,
      ahead: var_ahead,
      behind: var_behind,
      lastCommit: var_lastCommit,
      files: var_files,
    );
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_commit_info(
    CommitInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_commit_info(self, serializer);
  }

  @protected
  void sse_encode_commit_info(CommitInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.hash, serializer);
    sse_encode_String(self.shortHash, serializer);
    sse_encode_String(self.message, serializer);
    sse_encode_String(self.author, serializer);
    sse_encode_String(self.email, serializer);
    sse_encode_i_64(self.timestamp, serializer);
  }

  @protected
  void sse_encode_file_status(FileStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.path, serializer);
    sse_encode_file_status_kind(self.status, serializer);
  }

  @protected
  void sse_encode_file_status_kind(
    FileStatusKind self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_file_status(
    List<FileStatus> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_file_status(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_repository_info(
    List<RepositoryInfo> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_repository_info(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_commit_info(
    CommitInfo? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_commit_info(self, serializer);
    }
  }

  @protected
  void sse_encode_repo_status(RepoStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.path, serializer);
    sse_encode_bool(self.isClean, serializer);
    sse_encode_list_file_status(self.files, serializer);
  }

  @protected
  void sse_encode_repository_info(
    RepositoryInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.path, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.currentBranch, serializer);
    sse_encode_bool(self.isDirty, serializer);
    sse_encode_i_32(self.uncommittedChanges, serializer);
    sse_encode_i_32(self.untrackedFiles, serializer);
    sse_encode_i_32(self.unpushedCommits, serializer);
    sse_encode_i_32(self.ahead, serializer);
    sse_encode_i_32(self.behind, serializer);
    sse_encode_opt_box_autoadd_commit_info(self.lastCommit, serializer);
    sse_encode_list_file_status(self.files, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }
}
