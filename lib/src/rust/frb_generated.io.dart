// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/git.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'models/repository.dart';
import 'models/status.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  CommitInfo dco_decode_box_autoadd_commit_info(dynamic raw);

  @protected
  CommitInfo dco_decode_commit_info(dynamic raw);

  @protected
  FileStatus dco_decode_file_status(dynamic raw);

  @protected
  FileStatusKind dco_decode_file_status_kind(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw);

  @protected
  List<String> dco_decode_list_String(dynamic raw);

  @protected
  List<FileStatus> dco_decode_list_file_status(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<RepositoryInfo> dco_decode_list_repository_info(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  CommitInfo? dco_decode_opt_box_autoadd_commit_info(dynamic raw);

  @protected
  RepoStatus dco_decode_repo_status(dynamic raw);

  @protected
  RepositoryInfo dco_decode_repository_info(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  CommitInfo sse_decode_box_autoadd_commit_info(SseDeserializer deserializer);

  @protected
  CommitInfo sse_decode_commit_info(SseDeserializer deserializer);

  @protected
  FileStatus sse_decode_file_status(SseDeserializer deserializer);

  @protected
  FileStatusKind sse_decode_file_status_kind(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer);

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer);

  @protected
  List<FileStatus> sse_decode_list_file_status(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<RepositoryInfo> sse_decode_list_repository_info(
    SseDeserializer deserializer,
  );

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  CommitInfo? sse_decode_opt_box_autoadd_commit_info(
    SseDeserializer deserializer,
  );

  @protected
  RepoStatus sse_decode_repo_status(SseDeserializer deserializer);

  @protected
  RepositoryInfo sse_decode_repository_info(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_commit_info(
    CommitInfo self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_commit_info(CommitInfo self, SseSerializer serializer);

  @protected
  void sse_encode_file_status(FileStatus self, SseSerializer serializer);

  @protected
  void sse_encode_file_status_kind(
    FileStatusKind self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer);

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer);

  @protected
  void sse_encode_list_file_status(
    List<FileStatus> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_repository_info(
    List<RepositoryInfo> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_commit_info(
    CommitInfo? self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_repo_status(RepoStatus self, SseSerializer serializer);

  @protected
  void sse_encode_repository_info(
    RepositoryInfo self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;
}
