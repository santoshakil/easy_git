// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../models/repository.dart';
import '../models/status.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<List<String>> scanRepositories({required String rootPath}) =>
    RustLib.instance.api.crateApiGitScanRepositories(rootPath: rootPath);

Future<RepositoryInfo> getRepositoryInfo({required String path}) =>
    RustLib.instance.api.crateApiGitGetRepositoryInfo(path: path);

Future<RepoStatus> getRepositoryStatus({required String path}) =>
    RustLib.instance.api.crateApiGitGetRepositoryStatus(path: path);

Future<List<RepositoryInfo>> getMultipleRepositoryInfo({
  required List<String> paths,
}) => RustLib.instance.api.crateApiGitGetMultipleRepositoryInfo(paths: paths);

Future<String> commitRepository({
  required String path,
  required String message,
}) => RustLib.instance.api.crateApiGitCommitRepository(
  path: path,
  message: message,
);

Future<List<String>> commitMultipleRepositories({
  required List<String> paths,
  required String message,
}) => RustLib.instance.api.crateApiGitCommitMultipleRepositories(
  paths: paths,
  message: message,
);

Future<void> pushRepository({required String path}) =>
    RustLib.instance.api.crateApiGitPushRepository(path: path);

Future<void> fetchRepository({required String path}) =>
    RustLib.instance.api.crateApiGitFetchRepository(path: path);

Future<void> pullRepository({required String path}) =>
    RustLib.instance.api.crateApiGitPullRepository(path: path);

Future<List<String>> fetchMultipleRepositories({required List<String> paths}) =>
    RustLib.instance.api.crateApiGitFetchMultipleRepositories(paths: paths);

Future<List<String>> pushMultipleRepositories({required List<String> paths}) =>
    RustLib.instance.api.crateApiGitPushMultipleRepositories(paths: paths);

Future<List<String>> pullMultipleRepositories({required List<String> paths}) =>
    RustLib.instance.api.crateApiGitPullMultipleRepositories(paths: paths);

Future<void> discardRepositoryChanges({required String path}) =>
    RustLib.instance.api.crateApiGitDiscardRepositoryChanges(path: path);

Future<List<String>> discardMultipleRepositories({
  required List<String> paths,
}) => RustLib.instance.api.crateApiGitDiscardMultipleRepositories(paths: paths);
